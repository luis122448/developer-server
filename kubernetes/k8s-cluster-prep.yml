---
- name: Prepare Kubernetes Nodes
  hosts: workers, masters
  become: yes
  tasks:
    ## ----------------------------------------------------------------
    ## System & Prerequisite Setup
    ## ----------------------------------------------------------------

    - name: Update apt cache and upgrade all system packages
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist

    - name: Install prerequisite packages for Kubernetes
      ansible.builtin.apt:
        name:
          - curl
          - apt-transport-https
          - git
          - wget
          - software-properties-common
          - lsb-release
          - ca-certificates
          - socat
        state: present

    ## ----------------------------------------------------------------
    ## Kubernetes Runtime Configuration
    ## ----------------------------------------------------------------

    - name: Disable swap for the current session
      ansible.builtin.command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Remove swap entry from /etc/fstab to persist across reboots
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^\s*(.+\s+swap\s+)'
        state: absent

    - name: Ensure br_netfilter kernel module is loaded
      ansible.builtin.modprobe:
        name: br_netfilter
        state: present

    - name: Persist br_netfilter module on boot
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: "br_netfilter\n"
        owner: root
        group: root
        mode: "0644"

    - name: Apply required Kubernetes sysctl settings
      ansible.builtin.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
        state: present
        reload: yes
      loop:
        - { name: "net.bridge.bridge-nf-call-iptables", value: "1" }
        - { name: "net.ipv4.ip_forward", value: "1" }
        - { name: "net.bridge.bridge-nf-call-ip6tables", value: "1" }

    ## ----------------------------------------------------------------
    ## Node & SSH Configuration
    ## ----------------------------------------------------------------

    - name: Set system hostname from inventory
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Update /etc/hosts with all cluster nodes
      ansible.builtin.template:
        src: hosts.j2
        dest: /etc/hosts
        owner: root
        group: root
        mode: "0644"

    - name: Add authorized SSH key for ansible user
      ansible.builtin.authorized_key:
        user: "{{ ansible_user_id | default(ansible_user) }}"
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    ## ----------------------------------------------------------------
    ## Firewall Configuration (UFW)
    ## ----------------------------------------------------------------

    - name: Allow essential cluster traffic
      community.general.ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
        comment: "{{ item.comment }}"
      loop:
        # --- Cilium CNI ---
        - { port: '8472', proto: 'udp', comment: 'Cilium VXLAN for pod-to-pod networking' }
        
        # --- Kubelet API (All Nodes) ---
        - { port: '10250', proto: 'tcp', comment: 'Kubelet API for all nodes' }

        # --- Ingress Traffic (LoadBalancer entrypoint) ---
        # Allow web traffic to reach the Ingress Controller pods
        - { port: '80', proto: 'tcp', comment: 'Ingress HTTP traffic' }
        - { port: '443', proto: 'tcp', comment: 'Ingress HTTPS traffic' }
      when: "'workers' in group_names or 'masters' in group_names" # Run on all nodes

    - name: Allow control-plane specific traffic
      community.general.ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
        comment: "{{ item.comment }}"
      loop:
        # --- Kubernetes API Server ---
        - { port: '6443', proto: 'tcp', comment: 'Kubernetes API server' }
        
        # --- etcd Database ---
        - { port: '2379', proto: 'tcp', comment: 'etcd client traffic' }
        - { port: '2380', proto: 'tcp', comment: 'etcd server-to-server traffic' }
      when: "'masters' in group_names" # IMPORTANT: Run only on master nodes