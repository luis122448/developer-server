---
- name: Prepare containerd on all nodes
  hosts: workers, masters
  become: yes
  vars:
    containerd_sandbox_image: "registry.k8s.io/pause:3.10" # Ajustado segÃºn tu warning de kubeadm
  tasks:
    # --- Start of Aggressive Cleanup ---
    - name: Create /etc/apt/keyrings directory if it does not exist
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Create /usr/share/keyrings directory if it does not exist
      ansible.builtin.file:
        path: /usr/share/keyrings
        state: directory
        mode: '0755'

    - name: Remove potentially conflicting old Docker GPG key (.asc)
      ansible.builtin.file:
        path: /etc/apt/keyrings/docker.asc
        state: absent

    - name: Remove potentially conflicting old Docker GPG key (alternative location)
      ansible.builtin.file:
        path: /usr/share/keyrings/docker-archive-keyring.gpg
        state: absent

    - name: Ensure target Docker GPG key path (/etc/apt/keyrings/docker.gpg) is clear before creation
      ansible.builtin.file:
        path: /etc/apt/keyrings/docker.gpg
        state: absent

    - name: Remove main Docker APT source file managed by this playbook (if exists)
      ansible.builtin.file:
        path: "/etc/apt/sources.list.d/docker.list"
        state: absent

    - name: Remove known conflicting Docker APT source file identified by grep (signed_by_etc_apt_keyrings_docker_asc.list)
      ansible.builtin.file:
        path: "/etc/apt/sources.list.d/signed_by_etc_apt_keyrings_docker_asc.list"
        state: absent

    - name: Remove another known conflicting Docker APT source file (download_docker_com_linux_ubuntu.list)
      ansible.builtin.file:
        path: "/etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list"
        state: absent
    # --- End of Aggressive Cleanup ---

    # --- Diagnostic Step: Check sources *before* attempting to add repo ---
    - name: Check for existing Docker repo definitions BEFOREHAND (DEBUG)
      ansible.builtin.shell:
        cmd: "grep -rEi '(signed-by=|download.docker.com.*{{ ansible_lsb.codename }})' /etc/apt/sources.list /etc/apt/sources.list.d/ || true"
      register: docker_repo_grep_before
      changed_when: false
      check_mode: no

    - name: Display existing Docker repo definitions BEFOREHAND (DEBUG)
      ansible.builtin.debug:
        var: docker_repo_grep_before.stdout_lines
    # --- End of Diagnostic Step ---

    - name: Add Docker GPG key (de-armored) - this creates /etc/apt/keyrings/docker.gpg
      ansible.builtin.shell:
        cmd: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        creates: /etc/apt/keyrings/docker.gpg

    - name: Set Docker architecture fact for repository
      ansible.builtin.set_fact:
        docker_repo_arch: >- 
          {% if ansible_architecture == 'x86_64' %}amd64
          {% elif ansible_architecture == 'aarch64' or ansible_architecture == 'arm64' %}arm64
          {% elif ansible_architecture in ['armv7l', 'armhf'] %}armhf
          {% else %}{{ ansible_architecture }}detect_arch_error_please_specify
          {% endif %}

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ docker_repo_arch }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present
        filename: docker
        update_cache: yes

    - name: Check for Docker repo definitions AFTERWARDS (DEBUG)
      ansible.builtin.shell:
        cmd: "grep -rEi '(signed-by=|download.docker.com.*{{ ansible_lsb.codename }})' /etc/apt/sources.list /etc/apt/sources.list.d/ || true"
      register: docker_repo_grep_after
      changed_when: false
      check_mode: no

    - name: Display found Docker repo definitions AFTERWARDS (DEBUG)
      ansible.builtin.debug:
        var: docker_repo_grep_after.stdout_lines

    - name: Install containerd.io
      ansible.builtin.apt:
        name: containerd.io
        state: present

    - name: Create containerd configuration directory if it does not exist
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate containerd default config
      ansible.builtin.command: containerd config default
      register: ctd_config
      changed_when: false

    - name: Write containerd config.toml
      ansible.builtin.copy:
        dest: /etc/containerd/config.toml
        content: "{{ ctd_config.stdout }}"
        owner: root
        group: root
        mode: '0644'
      notify: Restart containerd

    - name: Ensure correct sandbox_image is set in containerd config.toml
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*#?\s*sandbox_image\s*=\s*".*"\s*$'
        line: '  sandbox_image = "{{ containerd_sandbox_image }}"'
        state: present
        backrefs: no
        backup: yes
      notify: Restart containerd
      when: "ctd_config.stdout is defined and ctd_config.stdout != ''"

    - name: Ensure SystemdCgroup=true in containerd config
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: '^(\s*SystemdCgroup\s*=\s*)false$'
        replace: '\1true'
        backup: yes
      notify: Restart containerd

    - name: Ensure containerd service is enabled and started
      ansible.builtin.systemd:
        name: containerd
        enabled: true
        state: started

  handlers:
    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        daemon_reload: yes