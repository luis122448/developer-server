#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status.

# Define variables
SERVICE_FILE_QBITTORRENT="/etc/systemd/system/qbittorrent-nox.service"
CONFIG_FILE_QBITTORRENT="/var/lib/qbittorrent-nox/.config/qBittorrent/qBittorrent.conf"
DEFAULT_WEBUI_PORT="8080"
WEBUI_PORT="$DEFAULT_WEBUI_PORT" # Default port
DOWNLOAD_DIR="/mnt/torrent/downloads" # Default download directory

# Note: Sourcing /etc/environment is kept from your original script,
# but it might not be necessary unless your environment specifically requires it.
# source /etc/environment

# Parse the command-line options
while getopts "hw:" opt; do
    case $opt in
        h|\? ) # Handle -h or any unknown option
            echo "Usage: $0 [options]"
            echo ""
            echo "This script installs and configures qBittorrent-nox as a systemd service."
            echo "It creates a dedicated user 'qbittorrent-nox' and sets up basic configuration."
            echo ""
            echo "Options:"
            echo "  -h, --help      Display this help message."
            echo "  -w PORT         Specify the Web UI port (default: $DEFAULT_WEBUI_PORT)."
            echo ""
            echo "Note: After setup, log in to the Web UI with default credentials (admin/adminadmin)"
            echo "and change the password immediately. You can access the Web UI at http://<your_server_ip>:$WEBUI_PORT"
            exit 0
            ;;
        w ) WEBUI_PORT=$OPTARG
            if ! [[ "$WEBUI_PORT" =~ ^[0-9]+$ ]]; then
                echo "Error: Port must be a number." >&2
                exit 1
            fi
            if (( WEBUI_PORT < 1024 || WEBUI_PORT > 65535 )); then
                 echo "Warning: Port $WEBUI_PORT is outside the typical user port range (1024-65535)." >&2
            fi
            ;;
    esac
done

shift $((OPTIND-1)) # Shift off the options so remaining arguments can be processed (though none expected here)

# Check if the script is run as root
if [ "$EUID" -ne 0 ]; then
    echo "Please run this script with sudo."
    exit 1
fi

echo "--- Installing qBittorrent-nox ---"
# Credits: https://linuxcapable.com/how-to-install-qbittorrent-on-ubuntu-linux/
apt update && apt install -y qbittorrent-nox

echo "--- Setting up qBittorrent user and directories ---"
# Create system user and group if they don't exist
if ! id "qbittorrent-nox" &>/dev/null; then
    echo "Creating user and group 'qbittorrent-nox'..."
    adduser --system --group qbittorrent-nox
else
    echo "User 'qbittorrent-nox' already exists."
fi

# Set user home directory (important for config files)
usermod -d /var/lib/qbittorrent-nox qbittorrent-nox

# Create necessary directories for config, cache, and downloads
mkdir -p /var/lib/qbittorrent-nox/.cache/qBittorrent
mkdir -p /var/lib/qbittorrent-nox/.config/qBittorrent
mkdir -p "$DOWNLOAD_DIR" # Create the default download directory

# Set ownership and permissions for the user's directories
echo "Setting permissions for /var/lib/qbittorrent-nox..."
chown -R qbittorrent-nox:qbittorrent-nox /var/lib/qbittorrent-nox
chmod -R 755 /var/lib/qbittorrent-nox # Standard directory permissions

# Add the current user to the qbittorrent-nox group to allow access to download files
echo "Adding user '$SUDO_USER' to group 'qbittorrent-nox'..."
# Use SUDO_USER to get the user who ran sudo
adduser $SUDO_USER qbittorrent-nox || true # '|| true' prevents script exit if user is already in group

# Stop the service if it's running before making changes
echo "Stopping qbittorrent-nox service (if running)..."
systemctl stop qbittorrent-nox || true # '|| true' prevents script exit if service is not running

echo "--- Creating qBittorrent systemd service file ---"
# Create the service file content
cat << EOF > /tmp/qbittorrent-nox.service
[Unit]
Description=qBittorrent Command Line Client
After=network.target

[Service]
Type=forking
User=qbittorrent-nox
Group=qbittorrent-nox
UMask=007
ExecStart=/usr/bin/qbittorrent-nox -d --webui-port=$WEBUI_PORT
Restart=on-failure
TimeoutStopSec=30

[Install]
WantedBy=multi-user.target
EOF

# Move the service file to the systemd directory
echo "Installing service file to $SERVICE_FILE_QBITTORRENT..."
mv /tmp/qbittorrent-nox.service "$SERVICE_FILE_QBITTORRENT"

echo "--- Creating qBittorrent configuration file ---"
# Create the configuration file content
# Note: Password hashing requires PBKDF2 and salt, typically generated by qBittorrent itself.
# We set basic options here. The user must change the password via the Web UI.
cat << EOF > /tmp/qbittorrent-nox.conf
[BitTorrent]
Session\\Port=35118 # Default BitTorrent listening port
Session\\QueueingSystemEnabled=false

[Meta]
MigrationVersion=6

[Network]
Cookies=@Invalid()

[Preferences]
WebUI\\Port=$WEBUI_PORT
WebUI\\UseUPnP=false # Disable UPnP for WebUI by default (can be changed later)
Downloads\\SavePath=$DOWNLOAD_DIR # Set the default download directory
# WebUI\\Password_PBKDF2=... # These are set by qBittorrent on first password change
# WebUI\\PasswordSalt=...
EOF

# Move the configuration file to the qbittorrent user's config directory
echo "Installing configuration file to $CONFIG_FILE_QBITTORRENT..."
mv /tmp/qbittorrent-nox.conf "$CONFIG_FILE_QBITTORRENT"
# Ensure the config file has correct permissions after moving as root
chown qbittorrent-nox:qbittorrent-nox "$CONFIG_FILE_QBITTORRENT"
chmod 644 "$CONFIG_FILE_QBITTORRENT"


echo "--- Starting and enabling qBittorrent-nox service ---"
# Reload the systemd manager configuration to pick up the new service file
systemctl daemon-reload

# Enable the service to start on boot
systemctl enable qbittorrent-nox

# Start the service
systemctl start qbittorrent-nox

# Check the service status
echo "--- qBittorrent-nox service status ---"
systemctl status qbittorrent-nox.service --no-pager || true

echo "--- Setup Complete ---"
echo "qBittorrent-nox has been installed and configured."
echo "Web UI is accessible at http://<your_server_ip>:$WEBUI_PORT"
echo "Default download directory is: $DOWNLOAD_DIR"
echo ""
echo "IMPORTANT: Log in to the Web UI using the default credentials (user: admin, password: adminadmin)"
echo "and change the password immediately for security reasons."